[{"/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/index.js":"1","/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/components/App.js":"2","/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/components/MasterHog.js":"3","/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/components/BabyHog.js":"4"},{"size":179,"mtime":1632496660825,"results":"5","hashOfConfig":"6"},{"size":178,"mtime":1632496660825,"results":"7","hashOfConfig":"6"},{"size":1137,"mtime":1632496660825,"results":"8","hashOfConfig":"6"},{"size":1030,"mtime":1632496660825,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"afs3hl",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/index.js",[],["20","21"],"/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/components/App.js",[],"/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/components/MasterHog.js",[],"/home/sandy/Development/code/mod2/react-hooks-dq-props-state-exercise/src/components/BabyHog.js",["22","23","24","25"],"import React from \"react\";\nimport normalBaby from \"../assets/unadulterated-hoglette.png\";\nimport SunBaby from \"../assets/sun-eyes.png\";\nimport BlueBaby from \"../assets/blue-eyes.png\";\nimport GlowingBaby from \"../assets/glowing-eyes.png\";\n\n// is there a way we could associate eye color string values with images?\n// perhaps so we could do something along the lines of `eyeColorMapper['blue'] and get back the right image?`\n\nfunction BabyHog(props) {\n  function handleChangeWeight(e) {\n    // how can we reuse this for both buttons?\n    // perhaps something with e.target.name === \"+\"\n  }\n\n  return (\n    <li className=\"hogbabies\">\n      <h1>Name</h1>\n      <h3>Weight:</h3>\n      <h3>Hobby:</h3>\n      <h4>Eye Color:</h4>\n\n      <button name=\"+\">Increase Weight</button>\n      <button name=\"-\">Decrease Weight</button>\n\n      <div className=\"hb-wrap\">\n        <img\n          src={normalBaby}\n          style={{ height: \"200px\" }}\n          alt=\"MasterBlasterJrJr\"\n        />\n      </div>\n    </li>\n  );\n}\n\nexport default BabyHog;\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":3,"column":8,"nodeType":"32","messageId":"33","endLine":3,"endColumn":15},{"ruleId":"30","severity":1,"message":"34","line":4,"column":8,"nodeType":"32","messageId":"33","endLine":4,"endColumn":16},{"ruleId":"30","severity":1,"message":"35","line":5,"column":8,"nodeType":"32","messageId":"33","endLine":5,"endColumn":19},{"ruleId":"30","severity":1,"message":"36","line":11,"column":12,"nodeType":"32","messageId":"33","endLine":11,"endColumn":30},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'SunBaby' is defined but never used.","Identifier","unusedVar","'BlueBaby' is defined but never used.","'GlowingBaby' is defined but never used.","'handleChangeWeight' is defined but never used.","no-global-assign","no-unsafe-negation"]